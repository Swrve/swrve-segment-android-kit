apply plugin: 'io.codearte.nexus-staging'
nexusStaging {
    packageGroup = project.SWRVE_SEGMENT_GROUP_ID
    stagingProfileId = System.getenv('SONATYPE_STAGING_ID')
    username = System.getenv('SONATYPE_USER')
    password = System.getenv('SONATYPE_PASSWORD')
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidJavadoc(type: Javadoc, dependsOn: "assembleRelease") {
    description "Generates Javadoc for release."
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
    failOnError true
    include 'com/swrve/**'

    // Use the release variant classpath
    android.libraryVariants.all { variant ->
        if (variant.name == "release") {
            source = variant.sourceSets.collect { it.java.sourceFiles }.inject { t, fc -> t + fc }
            doFirst {
                classpath += files(variant.javaCompileProvider.get().classpath.files)
            }
        }
    }
}
task androidJavadocsJar(type: Jar, dependsOn: androidJavadoc) {
    description "Package Javadoc for Swrve Segment SDK."
    archiveClassifier = 'javadoc'
    from androidJavadoc
}
task androidSourcesJar(type: Jar) {
    description "Package sources for Swrve Segment SDK."
    archiveClassifier = 'sources'
    from files(android.sourceSets.main.java.srcDirs)
}

if (System.getenv('GPG_KEY_ID') != null) {
    project.ext['signing.keyId'] = System.getenv('GPG_KEY_ID')
    project.ext['signing.password'] = System.getenv('GPG_KEY_PASSPHRASE')
    project.ext['signing.secretKeyRingFile'] = System.getenv('GPG_KEYRING_FILE')
}

publishing {
    repositories {
        maven {
            if (System.getenv('PUBLISH_TO_SONATYPE') != null) {
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                name = "sonatype"
                credentials {
                    username System.getenv('SONATYPE_USER')
                    password System.getenv('SONATYPE_PASSWORD')
                }
            } else {
                url "$buildDir/../publish" // publish directory
            }
        }
    }

    publications {
        release(MavenPublication) {
            artifactId project.SWRVE_SEGMENT_ARTIFACT_ID
            groupId project.SWRVE_SEGMENT_GROUP_ID
            version project.SWRVE_SEGMENT_SDK_VERSION
            artifacts = ["$buildDir/outputs/aar/${project.name}-release.aar", androidJavadocsJar, androidSourcesJar]

            // The publication doesn't know about our dependencies due to components.java not being present in aar pieces
            // so we have to manually add them to the pom
            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'SwrveSegmentSDK')
                root.appendNode('description', 'SwrveSegmentSDK is the swrve segment integration')
                root.appendNode('url', 'https://github.com/Swrve/swrve-segment-android-kit')

                def dependenciesNode = root.appendNode('dependencies')
                // Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.getByName("releaseCompileClasspath").allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'compile')
                }

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'scm:git@github.com:Swrve/swrve-segment-android-kit.git')
                scm.appendNode('connection', 'scm:git@github.com:Swrve/swrve-segment-android-kit.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:Swrve/swrve-segment-android-kit.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'sdkdev')
                developer.appendNode('name', 'Swrve SDK Developer')
            }
        }
    }
}

String isSignAndroidRelease = System.getenv('SIGN_ANDROID_RELEASE')
if (isSignAndroidRelease != null && isSignAndroidRelease.toBoolean()) {
    project.logger.lifecycle('Swrve: Setting sign publishing.publications')
    signing {
        sign publishing.publications
    }
} else {
    project.logger.lifecycle('Swrve: Not setting sign publishing.publications')
}

